#!/bin/bash

# CONFIGURATION VARIABLES 
forecastURL='https://www.yr.no/place/Poland/Lublin/Biała_Podlaska/forecast.xml'
needed_commands="xml"


# FUNCTION DEFINITIONS
check_for_needed_commands() {
    local missing_counter=0
    for needed_command in $needed_commands; do
      if ! hash "$needed_command" >/dev/null 2>&1; then
        printf "Command not found in PATH: %s\n" "$needed_command" >&2
        ((missing_counter++))
      fi
    done

    if ((missing_counter > 0)); then
      printf "Minimum %d commands are missing in PATH, aborting\n" "$missing_counter" >&2
      exit 1
    fi
}

usage() {
    echo "Usage: $(basename "$0") [-h | --help] [-t <time> | --time <time>]"
    echo "Options:"
    echo "  -h, --help  print this message"
    echo "  -t, --time  print forecast for this time"
}

fetch_forecast() {
    curl -sL $1
}

forecast_parse() {
    local forecast="$1"; shift
    echo "$forecast" | xml sel -B -T -t "$@"
}

get_location() {
    forecast_parse "$1"                              \
        -m "//weatherdata/location"                  \
        -o    "country:   " -v "country"             \
        -n -o "name:      " -v "name"                \
        -n -o "type:      " -v "type"                \
        -n -o "timezone:  " -v "timezone/@id"        \
        -n -o "altitude:  " -v "location/@altitude"  \
        -n -o "latitude:  " -v "location/@latitude"  \
        -n -o "longitude: " -v "location/@longitude"
}

get_credit() {
    forecast_parse "$1"              \
        -m    "//weatherdata/credit" \
        -v    "link/@text"           \
        -n -v "link/@url"
}

get_meta() {
    forecast_parse "$1"                        \
        -m    "//weatherdata/meta"             \
        -o    "last update: " -v "lastupdate"  \
        -n -o "next update: " -v "nextupdate"  
}

get_sun() {
    forecast_parse "$1"                     \
        -m    "//weatherdata/sun"           \
        -o    "sunrise: "     -v "@rise"    \
        -n -o "sunset:  "     -v "@set" 
}

get_forecast() {
    forecast_parse "$1"                                             \
        -m "//weatherdata/forecast/tabular/time"                    \
        -o    "time:            " -v "@from" -o " - " -v "@to"      \
        -n -o "forecast:        " -v "symbol/@name"                 \
        -n -o "temperature:     " -v "temperature/@value" -o "°C"   \
        -n -o "wind directions: " -v "windDirection/@name"          \
        -o    " "                 -v "windDirection/@deg"           \
        -o    "°"                 -v "windDirection/@code"          \
        -n -o "wind speed:      " -v "windSpeed/@name"              \
        -o    " "                 -v "windSpeed/@mps" -o " m/s"     \
        -n -o "precipitation:   " -v "precipitation/@value" -o " mm"\
        -n -o "pressure:        " -v "pressure/@value"              \
        -o    " "                 -v "pressure/@unit"               \
        -n -n
}

get_forecast() {
    # print all - default
    local __match="//weatherdata/forecast/tabular/time"
    local __times=0
    local __from=0
    local __to=0

    # print specific time only
    if [[ "$__time" ]]; then
        __times=$(forecast_parse "$1" -v "count(//time)")
        for n in $(seq 1 $__times); do

            # construct forecast time period xpath
            __match="//weatherdata/forecast/tabular/time[$n]"

            # get forecast "from" date
            __from="$(forecast_parse "$1" -m "$__match" -v "@from")"
            __from="$(date -d "$__from" +%s)"

            # workaround yr.no bug - sometimes forecast is few hours ahead
            # of current time and does not include current time, in that
            # case print first forecast available
            if [[ ( $n -eq 1 ) && ( $__time -le $__from ) ]]; then
                break
            fi

            if [[ $__time -gt $__from ]]; then
                __to="$(forecast_parse "$1" -m "$__match" -v "@to")"
                __to="$(date -d "$__from" +%s)"
                if [[ $__time -le $__to ]]; then
                    break
                fi
            fi
        done
    fi

    forecast_parse "$1" -m "$__match"                               \
        -o    "time:            " -v "@from" -o " - " -v "@to"      \
        -n -o "forecast:        " -v "symbol/@name"                 \
        -n -o "temperature:     " -v "temperature/@value" -o "°C"   \
        -n -o "wind directions: " -v "windDirection/@name"          \
        -o    " "                 -v "windDirection/@deg"           \
        -o    " °"                -v "windDirection/@code"          \
        -n -o "wind speed:      " -v "windSpeed/@name"              \
        -o    " "                 -v "windSpeed/@mps" -o " m/s"     \
        -n -o "precipitation:   " -v "precipitation/@value" -o " mm"\
        -n -o "pressure:        " -v "pressure/@value"              \
        -o    " "                 -v "pressure/@unit"               \
        -n -n
}


# MAIN CODE
while :
do
    case $1 in
        -h | --help)
            usage            
            exit
            ;;
        -t | --time)
            [[ $# < 2 ]] && { usage; exit 2; }
            if [[ $2 == now ]]; then 
                __time=$(date +%s)
            else
                __time=$(date -d "$2" +%s)
            fi
            shift 2
            ;;
        *)
            break
            ;;
    esac
done


check_for_needed_commands || exit 1

forecast=$(fetch_forecast  "$forecastURL")
echo "$(get_location "$forecast")" ; echo
echo "$(get_meta     "$forecast")" ; echo
echo "$(get_sun      "$forecast")" ; echo
echo "$(get_forecast "$forecast")" ; echo
echo "$(get_credit   "$forecast")"
